/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emmastewartgui;

import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
/**
 *
 * @author hurdmanphilippines
 */
public class ESWorkoutTimer extends javax.swing.JDialog {
     EmmaStewartGUI manager;
    int secondsPassed;
    int minutesPassed;
    int seconds;
    int minutes;
    int laps;
    int event;
    int distance;
    String stroke;
    String pb;
    Timer timer;
    TimerTask task;
    int state;
    int setID;

    /**
     * Creates new form ESWorkoutTimer
     */
    
    
    public ESWorkoutTimer(java.awt.Frame parent, boolean modal, String Clicked) {
        super(parent, modal);
        initComponents();
        
        manager = new EmmaStewartGUI();
        
       
        System.out.println(manager.getDescription(manager.getsetId(manager.getId(Clicked))));
        lblNameWorkout.setText(Clicked);
        lblSetDescription.setText(manager.getDescription(manager.getsetId(manager.getId(Clicked))));

        minutesPassed = manager.getMinute(manager.getsetId(manager.getId(Clicked)));
        System.out.println("Minutes: "+minutesPassed);

        secondsPassed = manager.getSeconds(manager.getsetId(manager.getId(Clicked)));
        System.out.println("seconds: "+secondsPassed);

        laps = manager.getLaps(manager.getsetId(manager.getId(Clicked)));
            
        distance = manager.getDist(manager.getsetId(manager.getId(Clicked)));
            
        stroke = manager.getStroke(manager.getsetId(manager.getId(Clicked)));
            
        pb = manager.getPB(manager.getsetId(manager.getId(Clicked)));
            
        minutes = minutesPassed;
        seconds = secondsPassed;
            
        lblInstructions.setText("Laps: "+laps+" Distance: "+distance+"m Stroke: "+stroke+" PB: "+pb+" minutes: "+minutes+" seconds: "+seconds);
            
        System.out.println("Laps: "+laps);
        start(Clicked);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void start(String clicked) {
       
          
            timer = new Timer();
            task = new TimerTask() {
                public void run () {
                  
                    if(event <= 9) {
                        
                        System.out.println("Event no: "+event);
                        
                        if(minutes == 0 && seconds == 0 && laps == 0){
                            
                            System.out.println("On the new loop");
                            
                            event++;
                           
                            laps = manager.getLaps(manager.getsetId(manager.getId(clicked))+event);
                            minutes = manager.getMinute(manager.getsetId(manager.getId(clicked))+event);
           
                            seconds = manager.getSeconds(manager.getsetId(manager.getId(clicked))+event);
                            System.out.println("Laps "+laps);
                            
                            lblSetDescription.setText(manager.getDescription(manager.getsetId(manager.getId(clicked))+event));
                             
                            distance = manager.getDist(manager.getsetId(manager.getId(clicked))+event);
            
                            stroke = manager.getStroke(manager.getsetId(manager.getId(clicked))+event);
            
                            pb = manager.getPB(manager.getsetId(manager.getId(clicked))+event);
                             
                            lblInstructions.setText("Laps: "+laps+" Distance: "+distance+"m Stroke: "+stroke+" PB: "+pb+" minutes: "+minutes+" seconds: "+seconds);
                            
                            
                        }
                        
                    
                        if(laps >= 1){


                            if(minutes >= 0){
                                
                                if(state == 1) {
                                    
                                    minutes = minutes;
                                    seconds = seconds;
                                    laps = laps;
                                    setID = manager.getsetId(manager.getId(clicked))+event;
                                    
                                    timer.cancel();
                                }

                                if(seconds < 10){
                                    lblSecsTime.setText("0" +Integer.toString(seconds));
                                }
                                else {
                                    lblSecsTime.setText(Integer.toString(seconds));
                                }
                                
                                if(minutes < 10){
                                    lblMinsTime.setText("0"+Integer.toString(minutes));
                                }
                                else {
                                    lblMinsTime.setText(Integer.toString(minutes)); 
                                }
                                seconds--;

                                if(seconds == 0){

                                    if(minutes < 10){
                                        lblMinsTime.setText("0"+Integer.toString(minutes));
                                    }
                                    else {
                                        lblMinsTime.setText(Integer.toString(minutes)); 
                                    }
                                    seconds = 60;
                                    minutes--;
                                }


                            }else {
                                
                                minutes = manager.getMinute(manager.getsetId(manager.getId(clicked))+event);
                                seconds = manager.getSeconds(manager.getsetId(manager.getId(clicked))+event);
                                laps--;
                            }


                        }
                        else {
                            lblSecsTime.setText("0" +Integer.toString(0));
                            lblMinsTime.setText("0" +Integer.toString(0));
                            
                            minutes = 0;
                            seconds = 0;
                            laps = 0;
                        }
                    }
                    else {
                        System.out.println("Sets is over!");
                        lblSecsTime.setText("0" +Integer.toString(0));
                        lblMinsTime.setText("0" +Integer.toString(0));
                        lblInstructions.setText("");
                        lblSetDescription.setText("All Sets are finish!");
                    }
                }
            };

            timer.scheduleAtFixedRate(task, 1000, 1000);
            
       
    }
    
    public void resume(){
        
          timer = new Timer();
            task = new TimerTask() {
                public void run () {
                  
                    if(event <= 9) {
                        
                        System.out.println("Event no: "+event);
                        
                        if(minutes == 0 && seconds == 0 && laps == 0){
                            
                            System.out.println("On the new loop");
                            
                             laps = manager.getLaps(setID+event);
                            
                            event++;
                            minutes = manager.getMinute(setID+event);
           
                            seconds = manager.getSeconds(setID+event);
                            System.out.println("Laps "+laps);
                            
                            lblSetDescription.setText(manager.getDescription(setID+event));
                             
                            distance = manager.getDist(setID+event);
            
                            stroke = manager.getStroke(setID+event);
            
                            pb = manager.getPB(setID+event);
                             
                            lblInstructions.setText("Laps: "+laps+" Distance: "+distance+"m Stroke: "+stroke+" PB: "+pb+" minutes: "+minutes+" seconds: "+seconds);
                            
                            
                        }
                        
                    
                        if(laps >= 1){


                            if(minutes >= 0){
                                
                                if(state == 1) {
                                   
                                    timer.cancel();
                                    
                                    minutes = minutes;
                                    seconds = seconds;
                                    laps = laps;
                                    setID = setID+event;
                                }

                                if(seconds < 10){
                                    lblSecsTime.setText("0" +Integer.toString(seconds));
                                }
                                else {
                                    lblSecsTime.setText(Integer.toString(seconds));
                                }
                                
                                if(minutes < 10){
                                    lblMinsTime.setText("0"+Integer.toString(minutes));
                                }
                                else {
                                    lblMinsTime.setText(Integer.toString(minutes)); 
                                }
                                seconds--;

                                if(seconds == 0){

                                    if(minutes < 10){
                                        lblMinsTime.setText("0"+Integer.toString(minutes));
                                    }
                                    else {
                                        lblMinsTime.setText(Integer.toString(minutes)); 
                                    }
                                    seconds = 60;
                                    minutes--;
                                }


                            }else {
                                
                                minutes = manager.getMinute(setID+event);
                                seconds = manager.getSeconds(setID+event);
                                laps--;
                            }


                        }
                        else {
                            lblSecsTime.setText("0" +Integer.toString(0));
                            lblMinsTime.setText("0" +Integer.toString(0));
                            
                            minutes = 0;
                            seconds = 0;
                            laps = 0;
                        }
                    }
                    else {
                        System.out.println("Sets is over!");
                        lblSecsTime.setText("0" +Integer.toString(0));
                        lblMinsTime.setText("0" +Integer.toString(0));
                        lblInstructions.setText("");
                        lblSetDescription.setText("All Sets are finish!");
                    }
                }
            };

            timer.scheduleAtFixedRate(task, 1000, 1000);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPause = new javax.swing.JButton();
        lblColon = new javax.swing.JLabel();
        lblSecsTime = new javax.swing.JLabel();
        lblMinsTime = new javax.swing.JLabel();
        lblNameWorkout = new javax.swing.JLabel();
        lblSetDescription = new javax.swing.JLabel();
        lblInstructions = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnPause.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnPause.setText("PAUSE");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        lblColon.setFont(new java.awt.Font("Tahoma", 0, 450)); // NOI18N
        lblColon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblColon.setText(":");

        lblSecsTime.setFont(new java.awt.Font("Tahoma", 0, 450)); // NOI18N
        lblSecsTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSecsTime.setText("00");

        lblMinsTime.setFont(new java.awt.Font("Tahoma", 0, 450)); // NOI18N
        lblMinsTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMinsTime.setText("00");

        lblNameWorkout.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        lblNameWorkout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameWorkout.setText("Name of Workout");

        lblSetDescription.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblSetDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSetDescription.setText("Set Description");

        lblInstructions.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblInstructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInstructions.setText("Instructions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(lblSetDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(717, 717, 717)
                            .addComponent(lblSecsTime, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(295, 295, 295)
                            .addComponent(lblNameWorkout, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblMinsTime, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblColon)))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(515, Short.MAX_VALUE)
                .addComponent(lblSetDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNameWorkout, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPause, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblMinsTime, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSecsTime, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblColon, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(147, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        String[] buttons = {"Continue", "Quit workout"};

        //timer.cancel();
        state = 1;

        System.out.println("System got paused!");

        System.out.println("Last minutes: "+minutes);
        System.out.println("Last seconds:" +seconds);
        System.out.print("Last laps: "+laps);

        //Give options to be pressed
        int rc = JOptionPane.showOptionDialog(null, "Paused", "Menu", JOptionPane.PLAIN_MESSAGE, 0, null, buttons, buttons[0]);
        //Display the message with a message name, header, and buttons to be pressed
        System.out.println(rc);
        if(rc == 0){
            //timer.
            state = 0;
            System.out.println("System got resume!");
            System.out.println("Last minutes: "+minutes);
            System.out.println("Last seconds:" +seconds);
            System.out.print("Last laps: "+laps);
            resume();
        }
        else if (rc == 1) {
            int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to quit this workout in session?", "Quit", JOptionPane.YES_NO_CANCEL_OPTION);
            //If user decides to quit workout, make sure that they for sure want to
            if (p == 0) {
                this.dispose();
                //Close the workout dialogue too
            } else {
                //timer.schedule( task, 1000, 1000 );
            }
        }

    }//GEN-LAST:event_btnPauseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ESWorkoutTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ESWorkoutTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ESWorkoutTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ESWorkoutTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause;
    private javax.swing.JLabel lblColon;
    private javax.swing.JLabel lblInstructions;
    private javax.swing.JLabel lblMinsTime;
    private javax.swing.JLabel lblNameWorkout;
    private javax.swing.JLabel lblSecsTime;
    private javax.swing.JLabel lblSetDescription;
    // End of variables declaration//GEN-END:variables
}
